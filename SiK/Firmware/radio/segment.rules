# segment.rules files assign source code modules to specific banks
# These files are only used when we build code with cpu supporting banking
# The final segment.rules file is constructed from any segment.rules found in
# the search path, defined in the CPU Makefile
# When building bankable code, the bank-alloc.py script automatically allocates
# modules to banks. segment.rules files provide hints, instructing the script
# as to which files are safe to move around and which files to leave alone
# In other words, only specify a rule for a file if you need to
# comments starting with "#" are supported
# The file spec in rules is actually interpreted as a python regex so you can
# write a rule that will match multiple files
#
# general rules --
#  SDCC's standard libraries will always go in CSEG - We don't touch them
#  Interrupt code must be in HOME. Specify all files with an ISR here
#  All files without an associated rule get allocated to a bank automatically

# Files with ISRs must be in HOME
BANK3 timer.c
BANK3 radio.c
BANK3 serial.c
HOME main.c
BANK3 printfl.c

BANK3 rtc.c
BANK3 pins_user.c
BANK3 mavlink.c

BANK3 packet.c
BANK3 golay.c
BANK3 crc.c

# There is a Parameter shared between these functions and should be in the same bank?
BANK3 parameters.c
BANK3 aesEncrypt.c
BANK3 at.c
BANK3 main_init.c

# freq_hooping needs to be in the same bank as tdm (due to __nonbanked to save space)
BANK3 freq_hopping.c
BANK3 tdm.c


# Flash MUST be in bank3 as it needs to read the end of this page
BANK3 flash.c

